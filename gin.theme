<?php

/**
 * @file
 * gin.theme
 */

use Drupal\Core\File\Exception\FileException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\gin\GinSettings;

/**
 * Implements hook_preprocess_HOOK() for html.
 */
function gin_preprocess_html(&$variables) {
  // Are we relevant?
  $gin_activated = _gin_is_active();

  if ($gin_activated) {
    // Get theme settings.
    /** @var \Drupal\gin\GinSettings $settings */
    $settings = \Drupal::classResolver(GinSettings::class);
    $toolbar = $settings->get('classic_toolbar');

    // Check if darkmode is enabled.
    if ($settings->get('enable_darkmode')) {
      $variables['attributes']['class'][] = 'gin--dark-mode';
    }

    // Set accent color.
    $variables['attributes']['data-gin-accent'] = $settings->get('preset_accent_color');

    // High contrast mode.
    if ($settings->get('high_contrast_mode')) {
      $variables['attributes']['class'][] = 'gin--high-contrast-mode';
    }

    // Edit form? Use the new Gin Edit form layout.
    if (_gin_is_content_form()) {
      $variables['attributes']['class'][] = 'gin--edit-form';
    }

    // Only add gin--classic-toolbar class if user has permission.
    if (!\Drupal::currentUser()->hasPermission('access toolbar')) {
      return;
    }

    $variables['attributes']['class'][] = 'gin--' . $toolbar . '-toolbar';
    // Gin secondary toolbar.
    if ($toolbar !== 'classic') {
      $variables['page']['gin_secondary_toolbar'] = [
        '#type' => 'toolbar',
        '#access' => \Drupal::currentUser()->hasPermission('access toolbar'),
        '#cache' => [
          'keys' => ['toolbar_secondary'],
          'contexts' => ['user.permissions'],
        ],
        '#attributes' => [
          'id' => 'toolbar-administration-secondary',
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for html__entity_browser__modal.
 */
function gin_preprocess_html__entity_browser__modal(&$variables) {
  gin_preprocess_html($variables);
}

/**
 * Implements hook_preprocess_HOOK() for page.
 */
function gin_preprocess_page(&$variables) {
  // Required for allowing subtheming Gin.
  $activeThemeName = \Drupal::theme()->getActiveTheme()->getName();
  $variables['active_admin_theme'] = $activeThemeName;
}

/**
 * Implements hook_preprocess_HOOK() for page_alter.
 */
function gin_theme_suggestions_page_alter(&$suggestions, $variables) {
  $path = \Drupal::requestStack()->getCurrentRequest()->getPathInfo();

  if ($path != '/') {
    $path = trim($path, '/');
    $arg = str_replace(["/", '-'], ['_', '_'], $path);
    $suggestions[] = 'page__' . $arg;
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_attachments.
 */
function gin_page_attachments_alter(&$page) {
  // Are we relevant?
  $gin_activated = _gin_is_active();

  if ($gin_activated) {
    // Get theme settings.
    $settings = \Drupal::classResolver(GinSettings::class);
    $toolbar = $settings->get('classic_toolbar');

    // Attach the init script.
    $page['#attached']['library'][] = 'gin/gin_init';

    if ($toolbar === 'classic') {
      // Attach the classic toolbar styles.
      $page['#attached']['library'][] = 'gin/gin_classic_toolbar';
    }
    elseif ($toolbar === 'horizontal') {
      // Attach the horizontal toolbar styles.
      $page['#attached']['library'][] = 'gin/gin_horizontal_toolbar';
    }
    else {
      // Attach toolbar styles.
      $page['#attached']['library'][] = 'gin/gin_toolbar';
    }

    // Attach accent overrides CSS.
    $page['#attached']['library'][] = 'gin/gin_accent';

    // Custom CSS file.
    if (file_exists('public://gin-custom.css')) {
      $page['#attached']['library'][] = 'gin/gin_custom_css';
    }

    // Expose settings to JS.
    $page['#attached']['drupalSettings']['gin']['darkmode'] = $settings->get('enable_darkmode');
    $page['#attached']['drupalSettings']['gin']['darkmode_class'] = 'gin--dark-mode';
    $page['#attached']['drupalSettings']['gin']['preset_accent_color'] = $settings->get('preset_accent_color');
    $page['#attached']['drupalSettings']['gin']['accent_color'] = $settings->get('accent_color');
    $page['#attached']['drupalSettings']['gin']['preset_focus_color'] = $settings->getDefault('preset_focus_color');
    $page['#attached']['drupalSettings']['gin']['focus_color'] = $settings->getDefault('focus_color');
    $page['#attached']['drupalSettings']['gin']['highcontrastmode'] = $settings->get('high_contrast_mode');
    $page['#attached']['drupalSettings']['gin']['highcontrastmode_class'] = 'gin--high-contrast-mode';

    // Add stylesheets for JS use.
    $basethemeurl_with_prefix = \Drupal::urlGenerator()->generateFromRoute('<front>', [], ['absolute' => TRUE]) . \Drupal::service('extension.list.theme')->getPath('gin');
    $page['#attached']['drupalSettings']['gin']['accent_css_path'] = $basethemeurl_with_prefix . '/dist/css/gin_accent.css';
    $page['#attached']['drupalSettings']['gin']['ckeditor_css_path'] = $basethemeurl_with_prefix . '/dist/css/gin_ckeditor.css';

    // Expose default settings.
    $page['#attached']['drupalSettings']['gin']['default_darkmode'] = $settings->getDefault('enable_darkmode');
    $page['#attached']['drupalSettings']['gin']['default_accent_color'] = $settings->getDefault('accent_color');
    $page['#attached']['drupalSettings']['gin']['default_preset_accent_color'] = $settings->getDefault('preset_accent_color');
    $page['#attached']['drupalSettings']['gin']['default_high_contrast_mode'] = $settings->getDefault('high_contrast_mode');
  }
}

/**
 * Implements hook_preprocess_HOOK() for node_edit_form.
 */
function gin_preprocess_node_edit_form(&$variables) {
  $module_handler = \Drupal::service('module_handler');

  // Check if Layout Paragraphs is active.
  $layout_paragraphs = $module_handler->moduleExists('layout_paragraphs');
  $variables['gin_layout_paragraphs'] = $layout_paragraphs;
}

/**
 * Implements hook_preprocess_HOOK() for paragraphs operations dropbutton.
 */
function gin_preprocess_links__dropbutton__operations__paragraphs(&$variables) {
  $variables['attributes']['class'][] = 'dropbutton--small';
}

/**
 * Implements form_alter_HOOK() for some major form changes.
 */
function gin_form_alter(&$form, $form_state, $form_id) {
  // Are we on an edit form?
  if (_gin_is_content_form($form, $form_state, $form_id)) {
    // Action buttons.
    if (isset($form['actions'])) {
      if (isset($form['actions']['preview'])) {
        // Put Save after Preview.
        $save_weight = $form['actions']['preview']['#weight'] ? $form['actions']['preview']['#weight'] + 1 : 11;
        $form['actions']['submit']['#weight'] = $save_weight;
      }

      // Create gin_actions group.
      $form['gin_actions'] = [
        '#type' => 'container',
        '#weight' => -1,
        '#multilingual' => TRUE,
        '#attributes' => [
          'class' => [
            'gin-sticky',
          ],
        ],
      ];
      // Assign status to gin_actions.
      $form['status']['#group'] = 'gin_actions';

      // Create actions group.
      $form['gin_actions']['actions'] = [
        '#type' => 'actions',
        '#weight' => 130,
      ];
      // Add Preview to gin_actions actions.
      $form['gin_actions']['actions']['preview'] = ($form['actions']['preview']) ?? [];
      // Add Submit to gin_actions actions.
      $form['gin_actions']['actions']['submit'] = ($form['actions']['submit']) ?? [];

      // Create gin_sidebar group.
      $form['gin_sidebar'] = [
        '#group' => 'meta',
        '#type' => 'container',
        '#weight' => 99,
        '#multilingual' => TRUE,
        '#attributes' => [
          'class' => [
            'gin-sidebar',
          ],
        ],
      ];
      // Copy footer over.
      $form['gin_sidebar']['footer'] = ($form['footer']) ?? [];
      // Copy actions over.
      $form['gin_sidebar']['actions'] = ($form['actions']) ?? [];
      // Unset previous added preview & submit.
      unset($form['gin_sidebar']['actions']['preview']);
      unset($form['gin_sidebar']['actions']['submit']);
    }

    // Attach library.
    $form['#attached']['library'][] = 'gin/gin_editform';
  }

  // If not logged in hide changed and author node info on add forms.
  $not_logged_in = \Drupal::currentUser()->isAnonymous();
  $route = \Drupal::routeMatch()->getRouteName();

  if ($not_logged_in && $route == 'node.add') {
    unset($form['meta']['changed']);
    unset($form['meta']['author']);
  }

  // User form (Login, Register or Forgot password).
  if (strpos($form_id, 'user_login') !== FALSE || strpos($form_id, 'user_register') !== FALSE || strpos($form_id, 'user_pass') !== FALSE) {
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
  }

  // Bulk forms: update action & actions to small variants.
  if (strpos($form_id, 'views_form') !== FALSE) {
    if (isset($form['header'])) {
      $bulk_form = current(preg_grep('/_bulk_form/', array_keys($form['header'])));

      if (isset($form['header'][$bulk_form])) {
        $form['header'][$bulk_form]['action']['#attributes']['class'][] = 'form-element--type-select--small';
        $form['header'][$bulk_form]['actions']['submit']['#attributes']['class'][] = 'button--small';

        // Remove double entry of submit button.
        unset($form['actions']['submit']);
      }
    }
  }
}

/**
 * Implements form_user_form_alter().
 */
function gin_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // If new user account, don't show settings yet.
  if ($route_name === 'user.admin_create') {
    return;
  }

  /** @var \Drupal\gin\GinSettings $settings */
  $settings = \Drupal::classResolver(GinSettings::class);

  if ($settings->allowUserOverrides()) {
    // Inject the settings for the dark mode feature.
    $form['gin_theme_settings'] = [
      '#type' => 'details',
      '#title' => t('Admin theme settings'),
      '#open' => TRUE,
      '#weight' => 90,
    ];

    /** @var \Drupal\Core\Session\AccountInterface $account */
    $account = $form_state->getBuildInfo()['callback_object']->getEntity();
    $form['gin_theme_settings']['enable_user_settings'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable overrides'),
      '#description' => t("Enables default admin theme overrides."),
      '#default_value' => $settings->userOverrideEnabled($account),
      '#weight' => 0,
    ];

    $form['gin_theme_settings']['user_settings'] = [
      '#type' => 'container',
      '#states' => [
        // Show if met.
        'visible' => [
          ':input[name="enable_user_settings"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['gin_theme_settings']['user_settings']['enable_darkmode'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable Darkmode (BETA)'),
      '#description' => t("Enables Darkmode for the admin interface."),
      '#default_value' => $settings->get('enable_darkmode', $account),
      '#weight' => 0,
    ];

    // Accent color setting.
    $form['gin_theme_settings']['user_settings']['preset_accent_color'] = [
      '#type' => 'radios',
      '#title' => t('Accent color'),
      '#default_value' => $settings->get('preset_accent_color', $account),
      '#options' => _gin_get_accent_color_presets(),
      '#after_build' => ['_gin_accent_radios'],
    ];

    // Main Accent color setting.
    $form['gin_theme_settings']['user_settings']['accent_color'] = [
      '#type' => 'textfield',
      '#placeholder' => '#77777',
      '#title' => t('Accent color'),
      '#description' => t('Use with caution, values should meet a11y criteria.'),
      '#default_value' => $settings->get('accent_color', $account),
      '#min' => '7',
      '#max' => '7',
      '#size' => '7',
      '#states' => [
        // Show if met.
        'visible' => [
          ':input[name="preset_accent_color"]' => ['value' => 'custom'],
        ],
      ],
    ];

    $form['gin_theme_settings']['user_settings']['high_contrast_mode'] = [
      '#type' => 'checkbox',
      '#title' => ('Increase contrast (EXPERIMENTAL)'),
      '#description' => t("Enables high contrast mode."),
      '#default_value' => $settings->get('high_contrast_mode', $account),
      '#weight' => 0,
    ];

    // Classic Toolbar user setting.
    $form['gin_theme_settings']['user_settings']['classic_toolbar'] = [
      '#type' => 'radios',
      '#title' => t('Drupal Toolbar'),
      '#description' => t('Choose Drupal Toolbar.'),
      '#default_value' => $settings->get('classic_toolbar', $account),
      '#options' => _gin_get_toolbar_presets(),
      '#after_build' => ['_gin_toolbar_radios'],
    ];

    // Attach custom js.
    $form['#attached']['library'][] = 'gin/gin_settings';

    array_unshift($form['actions']['submit']['#submit'], '_gin_user_form_submit');
  }
}

/**
 * Implements template_preprocess_HOOK() for select.
 */
function gin_preprocess_select(&$variables) {
  if (!empty($variables['element']['#title_display']) && $variables['element']['#title_display'] === 'attribute' && !empty((string) $variables['element']['#title'])) {
    $variables['attributes']['title'] = (string) $variables['element']['#title'];
  }

  $variables['attributes']['class'][] = 'form-element';
  $variables['attributes']['class'][] = $variables['element']['#multiple'] ?
    'form-element--type-select-multiple' :
    'form-element--type-select';

  if (
    in_array('block-region-select', $variables['attributes']['class']) ||
    in_array('block-weight', $variables['attributes']['class'])
  ) {
    $variables['attributes']['class'][] = 'form-element--extrasmall';
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function gin_preprocess_menu(&$variables) {
  if (isset($variables['theme_hook_original']) && $variables['theme_hook_original'] == 'menu__toolbar__admin') {
    // Check if the admin_toolbar module is installed.
    foreach ($variables['items'] as $key => $item) {
      $gin_id = str_replace('.', '-', $key);
      $variables['items'][$key]['gin_id'] = $gin_id;
    }

    // Move config & help menu items to end.
    $to_move = ['system.admin_config', 'help.main'];
    foreach ($to_move as $id) {
      $index = array_search($id, array_keys($variables['items']));
      if (is_numeric($index)) {
        $variables['items'] += array_splice($variables['items'], $index, 1);
      }
    }
  }
}

/**
 * Implements hook_preprocess_menu__toolbar__gin().
 */
function gin_preprocess_menu__toolbar__gin(&$variables) {
  // Get theme settings.
  /** @var \Drupal\gin\GinSettings $settings */
  $settings = \Drupal::classResolver(GinSettings::class);
  $logo_path = $settings->getDefault('icon_path');
  $logo_default = $settings->getDefault('icon_default');
  $variables['icon_default'] = $logo_default;

  if (!$logo_default) {
    $variables['icon_path'] = $logo_path;
  }

  // Expose Toolbar variant.
  $variables['toolbar_variant'] = $settings->get('classic_toolbar');
}

/**
 * Implements toolbar preprocess.
 */
function gin_preprocess_toolbar(&$variables) {
  $user_id = \Drupal::currentUser()->id();

  // Check that the field exists and that it has a value.
  if ($user_id) {
    $user = User::load($user_id);

    if (!empty($user->user_picture) && !empty($user->user_picture->entity)) {
      $image = $user->user_picture->entity->getFileUri();
      $style = \Drupal::entityTypeManager()->getStorage('image_style')->load('thumbnail');
      $url = $style->buildUrl($image);

      $variables['user_picture'] = $url;
    }
  }

  // Expose Toolbar variant.
  /** @var \Drupal\gin\GinSettings $settings */
  $settings = \Drupal::classResolver(GinSettings::class);
  $variables['toolbar_variant'] = $settings->get('classic_toolbar');
}

/**
 * Implements form_alter() for forms.
 */
function gin_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
}

/**
 * Implements form_alter() for input.
 */
function gin_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] === 'checkbox') {
    // Way to identify if checkbox is in a checkboxes group
    // as Drupal doesn't provide one yet (see #2643012)
    if (!isset($variables['element']['#error_no_message'])) {
      $suggestions[] = 'input__checkbox__toggle';
    }
  }
}

/**
 * Toolbar alter().
 */
function gin_theme_suggestions_toolbar_alter(array &$suggestions, array $variables) {
  $settings = \Drupal::classResolver(GinSettings::class);
  $toolbar = $settings->get('classic_toolbar');

  $suggestions[] = 'toolbar__gin';

  // Only if Classic Toolbar is disabled.
  if ($toolbar !== 'classic') {
    if ($variables['element']['#attributes']['id'] === 'toolbar-administration-secondary') {
      $suggestions[] = 'toolbar__gin__secondary';
    }
  }
}

/**
 * Toolbar menu alter().
 */
function gin_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['theme_hook_original']) && $variables['theme_hook_original'] == 'menu__toolbar__admin') {
    $suggestions[] = 'menu__toolbar__gin';
  }
}

/**
 * Set Gin CSS on top of all other CSS files.
 */
function gin_css_alter(&$css, $assets) {
  // UPDATE THIS PATH TO YOUR MODULE'S CSS PATH.
  $path = \Drupal::service('extension.list.theme')->getPath('gin') . '/dist/css/gin.css';

  if (isset($css[$path])) {
    // Use anything greater than 100 to have it load after the theme
    // as CSS_AGGREGATE_THEME is set to 100.
    // Let's be on the safe side and assign a high number to it.
    $css[$path]['group'] = 200;
  }
}

/**
 * Custom theme settings.
 */
function gin_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  /*
   * //////////////////////////
   * Unset unused settings.
   * * //////////////////////////
   */
  unset($form['logo']);

  /*
   * //////////////////////////
   * Move default theme settings to bottom.
   * * //////////////////////////
   */
  $form['favicon']['#open'] = FALSE;
  $form['favicon']['#weight'] = 98;
  $form['theme_settings']['#open'] = FALSE;
  $form['theme_settings']['#weight'] = 99;

  /*
   * //////////////////////////
   * General settings.
   * * //////////////////////////
   */
  $form['custom_settings'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => t('Settings'),
  ];
  /** @var \Drupal\gin\GinSettings $settings */
  $settings = \Drupal::classResolver(GinSettings::class);

  $userEditUrl = Url::fromRoute('entity.user.edit_form', ['user' => Drupal::currentUser()->id()])->toString();

  // Darkmode setting.
  // Check if this is overridden by the logged in user.
  $description = t("Enables Darkmode for the admin interface.");
  if ($settings->overridden('enable_darkmode')) {
    $darkmode = $settings->get('enable_darkmode') ? t('Enabled') : t('Disabled');
    $description .= '<br/><span class="form-item__warning">' . t('This setting is overridden by the <a href="@editUrl">current user</a>. Darkmode: <strong>@darkmode</strong></span>', ['@darkmode' => $darkmode, '@editUrl' => $userEditUrl]);
  }

  $form['custom_settings']['enable_darkmode'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Darkmode (BETA)'),
    '#description' => $description,
    '#default_value' => $settings->getDefault('enable_darkmode'),
  ];

  // Accent color setting.
  $form['custom_settings']['preset_accent_color'] = [
    '#type' => 'radios',
    '#title' => t('Accent color'),
    '#default_value' => $settings->getDefault('preset_accent_color'),
    '#options' => _gin_get_accent_color_presets(),
    '#after_build' => ['_gin_accent_radios'],
  ];

  // Check if this is overridden by the logged in user.
  if ($settings->overridden('preset_accent_color')) {
    $presetActionColorLabel = _gin_get_accent_color_preset_label($settings->get('preset_accent_color'));
    $form['custom_settings']['preset_accent_color']['#description'] = '<span class="form-item__warning">' . t('This setting is overridden by the <a href="@editUrl">current user</a>. Accent Color: <strong>@colorLabel</strong></span>', ['@editUrl' => $userEditUrl, '@colorLabel' => $presetActionColorLabel]);
  }

  // Main Accent color setting.
  $form['custom_settings']['accent_color'] = [
    '#type' => 'textfield',
    '#placeholder' => '#77777',
    '#title' => t('Custom Accent color'),
    '#description' => t('Use with caution, values should meet a11y criteria.'),
    '#default_value' => $settings->getDefault('accent_color'),
    '#min' => '7',
    '#max' => '7',
    '#size' => '7',
    '#states' => [
      // Show if met.
      'visible' => [
        ':input[name="preset_accent_color"]' => ['value' => 'custom'],
      ],
    ],
  ];

  // Check if this is overridden by the logged in user.
  if ($settings->overridden('accent_color')) {
    $userAccentColor = $settings->get('accent_color');
    $form['custom_settings']['accent_color']['#description'] = t('Use with caution, values should meet a11y criteria.') . '<br/>' . t('This setting is overridden by the <a href="@editUrl">current user</a>. Custom Accent Color: <strong>@accentColor</strong>', ['@editUrl' => $userEditUrl, '@accentColor' => $userAccentColor]);
  }

  // Focus color setting.
  $form['custom_settings']['preset_focus_color'] = [
    '#type' => 'select',
    '#title' => t('Focus color (BETA)'),
    '#default_value' => $settings->getDefault('preset_focus_color'),
    '#options' => [
      'gin' => t('Gin Focus color (Default)'),
      'green' => t('Green'),
      'claro' => t('Claro Green'),
      'orange' => t('Orange'),
      'dark' => t('Dark'),
      'accent' => t('Same as Accent color'),
      'custom' => t('Custom'),
    ],
  ];

  // Custom Focus color setting.
  $form['custom_settings']['focus_color'] = [
    '#type' => 'textfield',
    '#placeholder' => '#777777',
    '#title' => t('Custom Focus color (BETA)'),
    '#description' => t('Use with caution, values should meet a11y criteria.'),
    '#default_value' => $settings->getDefault('focus_color'),
    '#min' => '7',
    '#max' => '7',
    '#size' => '7',
    '#states' => [
      // Show if met.
      'visible' => [
        ':input[name="preset_focus_color"]' => ['value' => 'custom'],
      ],
    ],
  ];

  // High contrast mode.
  // Check if this is overridden by the logged in user.
  $hcm_description = t("Enables high contrast mode.");
  if ($settings->overridden('high_contrast_mode')) {
    $hcm_active = $settings->get('high_contrast_mode') ? t('Enabled') : t('Disabled');
    $hcm_description .= '<br/><span class="form-item__warning">' . t('This setting is overridden by the <a href="@editUrl">current user</a>. High Contrast Mode: <strong>@highcontrastmode</strong></span>', ['@highcontrastmode' => $hcm_active, '@editUrl' => $userEditUrl]);
  }

  $form['custom_settings']['high_contrast_mode'] = [
    '#type' => 'checkbox',
    '#title' => t('Increase contrast (EXPERIMENTAL)'),
    '#description' => $hcm_description,
    '#default_value' => $settings->getDefault('high_contrast_mode'),
  ];

  // Allow user settings.
  $form['custom_settings']['show_user_theme_settings'] = [
    '#type' => 'checkbox',
    '#title' => t('Users can override Gin settings'),
    '#description' => t('Expose the admin theme settings to users.'),
    '#default_value' => $settings->getDefault('show_user_theme_settings'),
  ];

  /*
   * //////////////////////////
   * Toolbar settings.
   * * //////////////////////////
   */
  $form['toolbar_wrapper'] = [
    '#type' => 'details',
    '#title' => t('Toolbar'),
    '#open' => TRUE,
  ];

  // Toolbar setting.
  // Check if this is overridden by the logged in user.
  $description = t('Choose Drupal Toolbar.');
  if ($settings->overridden('classic_toolbar')) {
    switch ($settings->get('classic_toolbar')) {
      case 'classic':
        $toolbar = t('Classic');
        break;

      case 'horizontal':
        $toolbar = t('Horizontal');
        break;

      default:
        $toolbar = t('Sidebar');
    }

    $description .= '<br/><span class="form-item__warning">' . t('This setting is overridden by the <a href="@editUrl">current user</a>. Toolbar: <strong>@toolbar</strong></span>', ['@toolbar' => $toolbar, '@editUrl' => $userEditUrl]);
  }
  $form['toolbar_wrapper']['classic_toolbar'] = [
    '#type' => 'radios',
    '#title' => t('Drupal Toolbar'),
    '#description' => $description,
    '#default_value' => $settings->getDefault('classic_toolbar'),
    '#options' => _gin_get_toolbar_presets(),
    '#after_build' => ['_gin_toolbar_radios'],
  ];

  /*
   * //////////////////////////
   * Logo settings.
   * * //////////////////////////
   */
  $form['icon'] = [
    '#type' => 'details',
    '#title' => t('Logo'),
    '#open' => TRUE,
  ];

  // Make sure that after updating it is set to use the default logo.
  $defaultIconDefault = $settings->getDefault('icon_default') !== NULL ? theme_get_setting('icon_default') : TRUE;

  $form['icon']['icon_default'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the default logo supplied by the theme'),
    '#default_value' => $defaultIconDefault,
    '#tree' => FALSE,
  ];
  $form['icon']['settings'] = [
    '#type' => 'container',
    '#states' => [
      // Hide the logo settings when using the default logo.
      'invisible' => [
        ':input[name="icon_default"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['icon']['settings']['icon_path'] = [
    '#type' => 'textfield',
    '#title' => t('Path to custom logo'),
    '#default_value' => $settings->getDefault('icon_path'),
  ];
  $form['icon']['settings']['icon_upload'] = [
    '#type' => 'file',
    '#title' => t('Upload logo image'),
    '#maxlength' => 40,
    '#description' => t("If you don't have direct file access to the server, use this field to upload your logo."),
    '#upload_validators' => [
      'file_validate_extensions' => ['png gif jpg jpeg apng svg'],
    ],
  ];

  // Add submit/validate function.
  $form['#validate'][] = 'gin_form_system_theme_settings_alter_validate';

  // Attach custom js.
  $form['#attached']['library'][] = 'gin/gin_settings';
}

/**
 * Validation for logo.
 */
function gin_form_system_theme_settings_alter_validate(array &$form, FormStateInterface $form_state) {
  $module_handler = \Drupal::service('module_handler');

  if (isset($form['icon']) && $module_handler->moduleExists('file')) {
    $file = _file_save_upload_from_form($form['icon']['settings']['icon_upload'], $form_state, 0);
    if ($file) {
      try {
        $filename = \Drupal::service('file_system')->copy($file->getFileUri(), \Drupal::config('system.file')->get('default_scheme') . '://');
        $form_state->setValue('icon_default', 0);
        $form_state->setValue('icon_path', $filename);
        $form_state->unsetValue('icon_upload');
      }
      catch (FileException $e) {
        \Drupal::logger('gin')->error($e->getMessage());
      }
    }
  }

  // When intending to use the default logo, unset the icon_path.
  if ($form_state->getValue('icon_default')) {
    $form_state->unsetValue('icon_path');
  }

  // If the user provided a path for a logo file, make sure a file
  // exists at that path.
  if ($form_state->getValue('icon_path')) {
    $path = _gin_validate_path_logo($form_state->getValue('icon_path'));

    if (!$path) {
      $form_state->setErrorByName('icon_path', t('The custom logo path is invalid.'));
    }
  }
}

/**
 * Accent color element.
 */
function _gin_accent_radios($element) {
  $options = array_keys($element['#options']);

  foreach ($options as $values) {
    $element[$values]['#attributes']['data-gin-accent'] = $element[$values]['#return_value'];
  }

  return $element;
}

/**
 * Toolbar element.
 */
function _gin_toolbar_radios($element) {
  $options = array_keys($element['#options']);

  $element['#attributes']['class'][] = 'toolbar-option';

  foreach ($options as $values) {
    $element[$values]['#attributes']['class'][] = 'toolbar-option__' . $element[$values]['#return_value'];
    $element[$values]['#attributes']['data-gin-toolbar'] = $element[$values]['#return_value'];
  }

  return $element;
}

/**
 * Implements helper function _gin_user_form_submit().
 */
function _gin_user_form_submit(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Session\AccountInterface $account */
  $account = $form_state->getBuildInfo()['callback_object']->getEntity();

  $enabledUserOverrides = $form_state->getValue('enable_user_settings');
  /** @var \Drupal\gin\GinSettings $settings */
  $settings = \Drupal::classResolver(GinSettings::class);
  if ($enabledUserOverrides) {
    $user_settings = [
      'enable_darkmode' => (bool) $form_state->getValue('enable_darkmode'),
      'preset_accent_color' => $form_state->getValue('preset_accent_color'),
      'accent_color' => $form_state->getValue('accent_color'),
      'classic_toolbar' => $form_state->getValue('classic_toolbar'),
      'high_contrast_mode' => (bool) $form_state->getValue('high_contrast_mode'),
    ];
    $settings->setAll($user_settings, $account);
  }
  else {
    $settings->clear($account);
  }
}

/**
 * Helper function for check if Gin is active.
 */
function _gin_is_active() {
  $theme_handler = \Drupal::service('theme_handler')->listInfo();

  // Check if set as frontend theme.
  $frontend_theme_name = \Drupal::config('system.theme')->get('default');

  // Check if base themes are set.
  if (isset($theme_handler[$frontend_theme_name]->base_themes)) {
    $frontend_base_themes = $theme_handler[$frontend_theme_name]->base_themes;
  }

  // Add theme name to base theme array.
  $frontend_base_themes[$frontend_theme_name] = $frontend_theme_name;

  // Check if set as admin theme.
  $admin_theme_name = \Drupal::config('system.theme')->get('admin');

  // Admin theme will have no value if it is set to use the default theme.
  if ($admin_theme_name) {
    $admin_base_themes = $theme_handler[$admin_theme_name]->base_themes;
    $admin_base_themes[$admin_theme_name] = $admin_theme_name;
  }
  else {
    $admin_base_themes = $frontend_base_themes;
  }

  $base_themes = array_merge($admin_base_themes, $frontend_base_themes);
  $gin_activated = array_key_exists('gin', $base_themes);

  return $gin_activated;
}

/**
 * Accent color presets helper function.
 */
function _gin_get_accent_color_presets() {
  return [
    'blue' => t('Gin Blue (Default)'),
    'light_blue' => t('Light Blue'),
    'dark_purple' => t('Dark Purple'),
    'purple' => t('Purple'),
    'teal' => t('Teal'),
    'green' => t('Green'),
    'pink' => t('Pink'),
    'red' => t('Red'),
    'orange' => t('Orange'),
    'yellow' => t('Yellow'),
    'custom' => t('Custom'),
  ];
}

/**
 * Toolbar presets helper function.
 */
function _gin_get_toolbar_presets() {
  return [
    'vertical' => t('Sidebar, Vertical Toolbar (Default)'),
    'horizontal' => t('Horizontal, Modern Toolbar'),
    'classic' => t('Legacy, Classic Drupal Toolbar'),
  ];
}

/**
 * Accent color preset label helper function.
 */
function _gin_get_accent_color_preset_label($key) {
  $options = _gin_get_accent_color_presets();

  if (!empty($options[$key])) {
    return $options[$key];
  }
  return '';
}

/**
 * Helper function for logo.
 *
 * Attempts to validate normal system paths, paths relative to the public files
 * directory, or stream wrapper URIs. If the given path is any of the above,
 * returns a valid path or URI that the theme system can display.
 *
 * @param string $path
 *   A path relative to the Drupal root or to the public files directory, or
 *   a stream wrapper URI.
 *
 * @return mixed
 *   A valid path that can be displayed through the theme system, or FALSE if
 *   the path could not be validated.
 */
function _gin_validate_path_logo($path) {
  $file_system = \Drupal::service('file_system');

  // // Absolute local file paths are invalid.
  if ($file_system->realpath($path) == $path) {
    return FALSE;
  }
  // A path relative to the Drupal root or a fully qualified URI is valid.
  if (is_file($path)) {
    return $path;
  }
  // Prepend 'public://' for relative file paths within public filesystem.
  if (StreamWrapperManager::getScheme($path) === FALSE) {
    $path = 'public://' . $path;
  }
  if (is_file($path)) {
    return $path;
  }
  return FALSE;
}

/**
 * Check if were on a content edit form.
 */
function _gin_is_content_form($form = NULL, $form_state = NULL, $form_id = NULL) {
  $is_content_form = FALSE;

  // Get route name.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Routes to include.
  $route_names = [
    'node.add',
    'entity.node.content_translation_add',
    'quick_node_clone.node.quick_clone',
    'entity.node.edit_form',
  ];

  if (
    in_array($route_name, $route_names, TRUE) ||
    ($form_state && ($form_state->getBuildInfo()['base_form_id'] ?? NULL) === 'node_form') ||
    ($route_name === 'entity.group_content.create_form' && strpos($form_id, 'group_node') === FALSE)
  ) {
    $is_content_form = TRUE;
  }

  // Forms to exclude.
  // If media library widget, don't use new content edit form.
  // gin_preprocess_html is not triggered here, so checking
  // the form id is enough.
  $form_ids_to_ignore = [
    'media_library_add_form_',
    'views_form_media_library_widget_',
    'views_exposed_form',
    'date_recur_modular_sierra_occurrences_modal',
  ];

  foreach ($form_ids_to_ignore as $form_id_to_ignore) {
    if ($form_id && strpos($form_id, $form_id_to_ignore) !== FALSE) {
      $is_content_form = FALSE;
    }
  }

  return $is_content_form;
}
