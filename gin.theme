<?php

/**
 * @file
 * gin.theme
 */

use Drupal\Core\File\Exception\FileException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\user\Entity\User;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_HOOK() for html.
 */
function gin_preprocess_html(&$variables) {
  // Are we relevant?
  $gin_activated = _gin_is_active();

  if ($gin_activated) {
    // Get route.
    $route = \Drupal::routeMatch()->getRouteName();

    // Get configs.
    $darkmode = _gin_dark_mode_enabled();
    $preset_accent_color = _gin_preset_accent_color();
    $toolbar = _gin_toolbar();
    $high_contrast_mode = _gin_highcontrastmode_enabled();

    // Check if darkmode is enabled.
    if ($darkmode === TRUE) {
      $variables['attributes']['class'][] = 'gin--dark-mode';
    }

    // Set accent color.
    if ($preset_accent_color) {
      $variables['attributes']['data-gin-accent'] = $preset_accent_color;
    }

    // High contrast mode.
    if ($high_contrast_mode === TRUE) {
      $variables['attributes']['class'][] = 'gin--high-contrast-mode';
    }

    // Edit form? Use the new Gin Edit form layout.
    if (
      $route == 'node.add' ||
      $route == 'entity.node.content_translation_add' ||
      $route == 'quick_node_clone.node.quick_clone' ||
      $route == 'entity.node.edit_form' ||
      $route == 'entity.group_content.create_form'
    ) {
      $variables['attributes']['class'][] = 'gin--edit-form';
    }

    // Only add gin--classic-toolbar class if user has permission.
    if (!\Drupal::currentUser()->hasPermission('access toolbar')) {
      return;
    }

    // Check if classic_toolbar is active.
    if ($toolbar === 1) {
      $variables['attributes']['class'][] = 'gin--classic-toolbar';
    }
    // If modern horizontal Toolbar is active.
    elseif ($toolbar === 'horizontal') {
      $variables['attributes']['class'][] = 'gin--horizontal-toolbar';
    }
    // Sidebar toolbar.
    else {
      $variables['attributes']['class'][] = 'gin--vertical-toolbar';
    }

    // Gin secondary toolbar.
    if ($toolbar !== 1) {
      $variables['page']['gin_secondary_toolbar'] = [
        '#type' => 'toolbar',
        '#access' => \Drupal::currentUser()->hasPermission('access toolbar'),
        '#cache' => [
          'keys' => ['toolbar_secondary'],
          'contexts' => ['user.permissions'],
        ],
        '#attributes' => [
          'id' => 'toolbar-administration-secondary',
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page.
 */
function gin_preprocess_page(&$variables) {
  // Required for allowing subtheming Gin.
  $activeThemeName = \Drupal::theme()->getActiveTheme()->getName();
  $variables['active_admin_theme'] = $activeThemeName;
}

/**
 * Implements hook_preprocess_HOOK() for page_alter.
 */
function gin_theme_suggestions_page_alter(&$suggestions, $variables) {
  $path = \Drupal::requestStack()->getCurrentRequest()->getPathInfo();

  if ($path != '/') {
    $path = trim($path, '/');
    $arg = str_replace(["/", '-'], ['_', '_'], $path);
    $suggestions[] = 'page__' . $arg;
  }
}

/**
 * Implements hook_preprocess_HOOK() for page_attachments.
 */
function gin_page_attachments_alter(&$page) {
  // Are we relevant?
  $gin_activated = _gin_is_active();

  if ($gin_activated) {
    // Get theme configs.
    $darkmode = _gin_dark_mode_enabled();
    $preset_accent_color = _gin_preset_accent_color();
    $accent_color = _gin_accent_color();
    $preset_focus_color = theme_get_setting('preset_focus_color');
    $focus_color = theme_get_setting('focus_color');
    $toolbar = _gin_toolbar();
    $highcontrastmode = _gin_highcontrastmode_enabled();

    // Define darkmode class.
    $darkmode_class = 'gin--dark-mode';
    $highcontrastmode_class = 'gin--high-contrast-mode';

    // Attach the init script.
    $page['#attached']['library'][] = 'gin/gin_init';

    if ($toolbar === 1) {
      // Attach the classic toolbar styles.
      $page['#attached']['library'][] = 'gin/gin_classic_toolbar';
    }
    elseif ($toolbar === 'horizontal') {
      // Attach the horizontal toolbar styles.
      $page['#attached']['library'][] = 'gin/gin_horizontal_toolbar';
    }
    else {
      // Attach toolbar styles.
      $page['#attached']['library'][] = 'gin/gin_toolbar';
    }

    // Attach accent overrides CSS.
    $page['#attached']['library'][] = 'gin/gin_accent';

    // Custom CSS file.
    if (file_exists('public://gin-custom.css')) {
      $page['#attached']['library'][] = 'gin/gin_custom_css';
    }

    // Expose settings to JS.
    $page['#attached']['drupalSettings']['gin']['darkmode'] = $darkmode;
    $page['#attached']['drupalSettings']['gin']['darkmode_class'] = $darkmode_class;
    $page['#attached']['drupalSettings']['gin']['preset_accent_color'] = $preset_accent_color;
    $page['#attached']['drupalSettings']['gin']['accent_color'] = $accent_color;
    $page['#attached']['drupalSettings']['gin']['preset_focus_color'] = $preset_focus_color;
    $page['#attached']['drupalSettings']['gin']['focus_color'] = $focus_color;
    $page['#attached']['drupalSettings']['gin']['highcontrastmode'] = $highcontrastmode;
    $page['#attached']['drupalSettings']['gin']['highcontrastmode_class'] = $highcontrastmode_class;

    // Add stylesheets for JS use.
    $basethemeurl_with_prefix = \Drupal::urlGenerator()->generateFromRoute('<front>', [], ['absolute' => TRUE]) . drupal_get_path('theme', 'gin');
    $page['#attached']['drupalSettings']['gin']['accent_css_path'] = $basethemeurl_with_prefix . '/dist/css/gin_accent.css';
    $page['#attached']['drupalSettings']['gin']['ckeditor_css_path'] = $basethemeurl_with_prefix . '/dist/css/gin_ckeditor.css';

    // Expose default settings.
    $page['#attached']['drupalSettings']['gin']['default_darkmode'] = theme_get_setting('enable_darkmode');
    $page['#attached']['drupalSettings']['gin']['default_accent_color'] = theme_get_setting('accent_color');
    $page['#attached']['drupalSettings']['gin']['default_preset_accent_color'] = theme_get_setting('preset_accent_color');
    $page['#attached']['drupalSettings']['gin']['default_high_contrast_mode'] = theme_get_setting('high_contrast_mode');
  }
}

/**
 * Implements hook_preprocess_HOOK() for links__dropbutton.
 */
function gin_preprocess_dropbutton_wrapper(&$variables) {
  $children = (string) $variables['children'];

  $pattern = '/(<ul\sclass\s*= *["\']?)([^"\']*)(.*)(<li)/i';
  $lipattern = '/(<li class\s*= *["\']?)([^"\']*)/i';

  $children = preg_replace($lipattern, '$1$2 dropbutton__item dropbutton__item--extrasmall', $children);
  $children = preg_replace('/<li>/', '<li class="dropbutton__item dropbutton__item--extrasmall">', $children);
  $children = preg_replace($pattern, '$1$2 dropbutton--multiple dropbutton--extrasmall $3$4', $children);

  $variables['children'] = Markup::create($children);
}

/**
 * Implements form_alter_HOOK() for some major form changes.
 */
function gin_form_alter(&$form, $form_state, $form_id) {
  // Get route.
  $route = \Drupal::routeMatch()->getRouteName();

  // Forms to alter.
  if (
    ($route == 'node.add' ||
      $route == 'entity.node.content_translation_add' ||
      $route == 'quick_node_clone.node.quick_clone' ||
      $route == 'entity.node.edit_form' ||
      ($route == 'entity.group_content.create_form' && strpos($form_id, 'group_node') === FALSE)
    ) &&
    strpos($form_id, 'views_form_media_library_widget_') === FALSE &&
    strpos($form_id, 'media_library_add_form_') === FALSE &&
    strpos($form_id, 'views_exposed_form') === FALSE
  ) {
    // Submit change weight.
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#weight'] = '99';
    }

    if (isset($form['actions'])) {
      // Create gin_sticky group.
      $form['gin_sticky'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => [
            'gin-sticky',
          ],
        ],
      ];
      // Assign status to gin_sticky.
      $form['status']['#group'] = 'gin_sticky';

      // Create actions group.
      $form['gin_sticky']['actions'] = [
        '#type' => 'actions',
        '#weight' => 130,
      ];
      // Add Submit to gin_sticky actions.
      $form['gin_sticky']['actions']['submit'] = ($form['actions']['submit']) ?? [];
      // Add Preview to gin_sticky actions.
      $form['gin_sticky']['actions']['preview'] = ($form['actions']['preview']) ?? [];

      // Create gin_sidebar group.
      $form['gin_sidebar'] = [
        '#group' => 'meta',
        '#type' => 'container',
        '#weight' => 99,
        '#multilingual' => TRUE,
        '#attributes' => [
          'class' => [
            'gin-sidebar',
          ],
        ],
      ];
      // Copy footer over.
      $form['gin_sidebar']['footer'] = ($form['footer']) ?? [];
      // Copy actions over.
      $form['gin_sidebar']['actions'] = ($form['actions']) ?? [];
      // Unset previous added preview & submit.
      unset($form['gin_sidebar']['actions']['preview']);
      unset($form['gin_sidebar']['actions']['submit']);
    }
  }

  // If not logged in hide changed and author node info on add forms.
  $not_logged_in = \Drupal::currentUser()->isAnonymous();

  if ($not_logged_in && $route == 'node.add') {
    unset($form['meta']['changed']);
    unset($form['meta']['author']);
  }

  // User form (Login, Register or Forgot password).
  if (strpos($form_id, 'user_login') !== FALSE || strpos($form_id, 'user_register') !== FALSE || strpos($form_id, 'user_pass') !== FALSE) {
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
  }

  // Bulk forms: update action & actions to small variants.
  if (strpos($form_id, 'views_form') !== FALSE) {
    if (isset($form['header'])) {
      $bulk_form = current(preg_grep('/_bulk_form/', array_keys($form['header'])));

      if (isset($form['header'][$bulk_form])) {
        $form['header'][$bulk_form]['action']['#attributes']['class'][] = 'form-element--type-select--small';
        $form['header'][$bulk_form]['actions']['submit']['#attributes']['class'][] = 'button--small';

        // Remove double entry of submit button.
        unset($form['actions']['submit']);
      }
    }
  }
}

/**
 * Implements form_user_form_alter().
 */
function gin_form_user_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->getBuildInfo()['callback_object']->getEntity();

  if ($user->id()) {
    /** @var \Drupal\user\UserDataInterface $userData */
    $userData = Drupal::service('user.data');
    $enabledUserOverrides = $userData->get('gin', $user->id(), 'enable_user_settings');
    $darkModeValue = $userData->get('gin', $user->id(), 'enable_darkmode');

    if ($darkModeValue == NULL) {
      $darkModeValue = theme_get_setting('enable_darkmode') == TRUE ? TRUE : FALSE;
    }

    // Inject the settings for the dark mode feature.
    $form['gin_theme_settings'] = [
      '#type' => 'details',
      '#title' => t('Admin theme settings'),
      '#open' => TRUE,
      '#weight' => 90,
    ];

    $form['gin_theme_settings']['enable_user_settings'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable overrides'),
      '#description' => t("Enables default admin theme overrides."),
      '#default_value' => $enabledUserOverrides,
      '#weight' => 0,
    ];

    $form['gin_theme_settings']['user_settings'] = [
      '#type' => 'container',
      '#states' => [
        // Show if met.
        'visible' => [
          ':input[name="enable_user_settings"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['gin_theme_settings']['user_settings']['enable_darkmode'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable Darkmode (BETA)'),
      '#description' => t("Enables Darkmode for the admin interface."),
      '#default_value' => $darkModeValue !== NULL ? $darkModeValue : 0,
      '#weight' => 0,
    ];

    $accentColorPresetValue = $userData->get('gin', $user->id(), 'preset_accent_color');

    if ($accentColorPresetValue == NULL) {
      $accentColorPresetValue = theme_get_setting('preset_accent_color');
    }

    // Accent color setting.
    $form['gin_theme_settings']['user_settings']['preset_accent_color'] = [
      '#type' => 'radios',
      '#title' => t('Accent color'),
      '#default_value' => $accentColorPresetValue,
      '#options' => _gin_get_accent_color_presets(),
      '#after_build' => ['_gin_accent_radios'],
    ];

    $accentColorValue = $userData->get('gin', $user->id(), 'accent_color');

    if ($accentColorValue == NULL) {
      $accentColorValue = theme_get_setting('accent_color');
    }

    // Main Accent color setting.
    $form['gin_theme_settings']['user_settings']['accent_color'] = [
      '#type' => 'textfield',
      '#placeholder' => '#77777',
      '#title' => t('Accent color'),
      '#description' => t('Use with caution, values should meet a11y criteria.'),
      '#default_value' => $accentColorValue,
      '#min' => '7',
      '#max' => '7',
      '#size' => '7',
      '#states' => [
        // Show if met.
        'visible' => [
          ':input[name="preset_accent_color"]' => ['value' => 'custom'],
        ],
      ],
    ];

    $hcm_value = $userData->get('gin', $user->id(), 'high_contrast_mode');

    if ($hcm_value == NULL) {
      $hcm_value = theme_get_setting('high_contrast_mode') == TRUE ? TRUE : FALSE;
    }

    $form['gin_theme_settings']['user_settings']['high_contrast_mode'] = [
      '#type' => 'checkbox',
      '#title' => ('Increase contrast (EXPERIMENTAL)'),
      '#description' => t("Enables high contrast mode."),
      '#default_value' => $hcm_value !== NULL ? $hcm_value : 0,
      '#weight' => 0,
    ];

    $toolbarValue = $userData->get('gin', $user->id(), 'classic_toolbar');

    if ($toolbarValue == NULL) {
      $toolbarValue = theme_get_setting('classic_toolbar');
    }

    // Classic Toolbar user setting.
    $form['gin_theme_settings']['user_settings']['classic_toolbar'] = [
      '#type' => 'radios',
      '#title' => t('Drupal Toolbar'),
      '#description' => t('Choose Drupal Toolbar.'),
      '#default_value' => $toolbarValue,
      '#options' => _gin_get_toolbar_presets(),
      '#after_build' => ['_gin_toolbar_radios'],
    ];

    // Attach custom js.
    $form['#attached']['library'][] = 'gin/gin_settings';

    array_unshift($form['actions']['submit']['#submit'], '_gin_user_form_submit');
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function gin_preprocess_menu(&$variables) {
  if (isset($variables['theme_hook_original']) && $variables['theme_hook_original'] == 'menu__toolbar__admin') {
    $moduleHandler = \Drupal::service('module_handler');

    // Check if the admin_toolbar module is installed.
    foreach ($variables['items'] as $key => $item) {
      $gin_id = str_replace('.', '-', $key);

      $variables['items'][$key]['gin_id'] = $gin_id;

      if ($moduleHandler->moduleExists('admin_toolbar')) {
        $variables['items'][$key]['gin_admin_toolbar_module'] = TRUE;
      }
    }
  }
}

/**
 * Implements toolbar preprocess.
 */
function gin_preprocess_toolbar(&$variables) {
  $user_id = \Drupal::currentUser()->id();

  // Check that the field exists and that it has a value.
  if ($user_id) {
    $user = User::load($user_id);

    if (!empty($user->user_picture) && !empty($user->user_picture->entity)) {
      $image = $user->user_picture->entity->getFileUri();
      $style = \Drupal::entityTypeManager()->getStorage('image_style')->load('thumbnail');
      $url = $style->buildUrl($image);

      $variables['user_picture'] = $url;
    }
  }
}

/**
 * Implements form_alter() for forms.
 */
function gin_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
}

/**
 * Toolbar alter().
 */
function gin_theme_suggestions_toolbar_alter(array &$suggestions, array $variables) {
  $toolbar = _gin_toolbar();

  $suggestions[] = 'toolbar__gin';

  // Only if Classic Toolbar is disabled.
  if ($toolbar !== 1) {
    if ($variables['element']['#attributes']['id'] === 'toolbar-administration-secondary') {
      $suggestions[] = 'toolbar__gin__secondary';
    }
  }
}

/**
 * Toolbar menu alter().
 */
function gin_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $toolbar = _gin_toolbar();

  if (isset($variables['theme_hook_original']) && $variables['theme_hook_original'] == 'menu__toolbar__admin') {
    $suggestions[] = 'menu__toolbar__gin';
  }
}

/**
 * Set Gin CSS on top of all other CSS files.
 */
function gin_css_alter(&$css, $assets) {
  // UPDATE THIS PATH TO YOUR MODULE'S CSS PATH.
  $path = drupal_get_path('theme', 'gin') . '/dist/css/gin.css';

  if (isset($css[$path])) {
    // Use anything greater than 100 to have it load after the theme
    // as CSS_AGGREGATE_THEME is set to 100.
    // Let's be on the safe side and assign a high number to it.
    $css[$path]['group'] = 200;
  }
}

/**
 * Implements hook_preprocess_menu__toolbar__gin().
 */
function gin_preprocess_menu__toolbar__gin(&$variables) {
  // Get theme configs.
  $logo_path = theme_get_setting('icon_path');
  $logo_default = theme_get_setting('icon_default');
  $variables['icon_default'] = $logo_default;

  if (!$logo_default) {
    $variables['icon_path'] = $logo_path;
  }
}

/**
 * Custom theme settings.
 */
function gin_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  /*
   * //////////////////////////
   * Unset unused settings.
   * * //////////////////////////
   */
  unset($form['logo']);

  /*
   * //////////////////////////
   * Move default theme settings to bottom.
   * * //////////////////////////
   */
  $form['favicon']['#open'] = FALSE;
  $form['favicon']['#weight'] = 98;
  $form['theme_settings']['#open'] = FALSE;
  $form['theme_settings']['#weight'] = 99;

  /*
   * //////////////////////////
   * General settings.
   * * //////////////////////////
   */
  $form['custom_settings'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => t('Settings'),
  ];

  $user_overrides = _gin_user__overrides_enabled();
  $userEditUrl = Url::fromRoute('entity.user.edit_form', ['user' => Drupal::currentUser()->id()])->toString();

  // Darkmode setting.
  // Check if this is overridden by the logged in user.
  $userDarkMode = _gin_dark_mode_enabled();
  $themeDarkMode = theme_get_setting('enable_darkmode');
  $description = t("Enables Darkmode for the admin interface.");

  if (!is_null($userDarkMode) && $userDarkMode !== $themeDarkMode) {
    $darkmode = $userDarkMode ? t('Enabled') : t('Disabled');
    $description = t("Enables Darkmode for the admin interface.") . '<br/><span class="form-item__warning">' . t('This setting is overridden by the <a href="@editUrl">current user</a>. Darkmode: <strong>@darkmode</strong></span>', ['@darkmode' => $darkmode, '@editUrl' => $userEditUrl]);
  }

  $form['custom_settings']['enable_darkmode'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Darkmode (BETA)'),
    '#description' => $description,
    '#default_value' => $themeDarkMode,
  ];

  // Accent color setting.
  // Check if this is overridden by the logged in user.
  $userPresetAccentColor = _gin_user__get_preset_accentcolor();
  $themePresetAccentColor = theme_get_setting('preset_accent_color');
  $form['custom_settings']['preset_accent_color'] = [
    '#type' => 'radios',
    '#title' => t('Accent color'),
    '#default_value' => $themePresetAccentColor,
    '#options' => _gin_get_accent_color_presets(),
    '#after_build' => ['_gin_accent_radios'],
  ];

  if ($user_overrides && !is_null($userPresetAccentColor) && $userPresetAccentColor !== $themePresetAccentColor) {
    $presetActionColorLabel = _gin_get_accent_color_preset_label($userPresetAccentColor);
    $form['custom_settings']['preset_accent_color']['#description'] = '<span class="form-item__warning">' . t('This setting is overridden by the <a href="@editUrl">current user</a>. Accent Color: <strong>@colorLabel</strong></span>', ['@editUrl' => $userEditUrl, '@colorLabel' => $presetActionColorLabel]);
  }

  // Check if this is overridden by the logged in user.
  $userAccentColor = _gin_user__accentcolor();
  $themeAccentColor = theme_get_setting('accent_color');

  // Main Accent color setting.
  $form['custom_settings']['accent_color'] = [
    '#type' => 'textfield',
    '#placeholder' => '#77777',
    '#title' => t('Custom Accent color'),
    '#description' => t('Use with caution, values should meet a11y criteria.'),
    '#default_value' => $themeAccentColor,
    '#min' => '7',
    '#max' => '7',
    '#size' => '7',
    '#states' => [
      // Show if met.
      'visible' => [
        ':input[name="preset_accent_color"]' => ['value' => 'custom'],
      ],
    ],
  ];

  if ($user_overrides && !is_null($userAccentColor) && $userAccentColor !== $themeAccentColor) {
    $form['custom_settings']['accent_color']['#description'] = t('Use with caution, values should meet a11y criteria.') . '<br/>' . t('This setting is overridden by the <a href="@editUrl">current user</a>. Custom Accent Color: <strong>@accentColor</strong>', ['@editUrl' => $userEditUrl, '@accentColor' => $userAccentColor]);
  }

  // Focus color setting.
  $form['custom_settings']['preset_focus_color'] = [
    '#type' => 'select',
    '#title' => t('Focus color (BETA)'),
    '#default_value' => theme_get_setting('preset_focus_color'),
    '#options' => [
      'gin' => t('Gin Focus color (Default)'),
      'green' => t('Green'),
      'claro' => t('Claro Green'),
      'orange' => t('Orange'),
      'dark' => t('Dark'),
      'accent' => t('Same as Accent color'),
      'custom' => t('Custom'),
    ],
  ];

  // Custom Focus color setting.
  $form['custom_settings']['focus_color'] = [
    '#type' => 'textfield',
    '#placeholder' => '#777777',
    '#title' => t('Custom Focus color (BETA)'),
    '#description' => t('Use with caution, values should meet a11y criteria.'),
    '#default_value' => theme_get_setting('focus_color'),
    '#min' => '7',
    '#max' => '7',
    '#size' => '7',
    '#states' => [
      // Show if met.
      'visible' => [
        ':input[name="preset_focus_color"]' => ['value' => 'custom'],
      ],
    ],
  ];

  // High contrast mode.
  // Check if this is overridden by the logged in user.
  $hcm_user = _gin_highcontrastmode_enabled();
  $hcm_default = theme_get_setting('high_contrast_mode');
  $hcm_description = t("Enables high contrast mode.");

  if ($user_overrides && !is_null($hcm_user) && $hcm_user !== $hcm_default) {
    $hcm_active = $hcm_user ? t('Enabled') : t('Disabled');
    $hcm_description = t("Enables high contrast mode.") . '<br/><span class="form-item__warning">' . t('This setting is overridden by the <a href="@editUrl">current user</a>. High Contrast Mode: <strong>@highcontrastmode</strong></span>', ['@highcontrastmode' => $hcm_active, '@editUrl' => $userEditUrl]);
  }

  $form['custom_settings']['high_contrast_mode'] = [
    '#type' => 'checkbox',
    '#title' => t('Increase contrast (EXPERIMENTAL)'),
    '#description' => $hcm_description,
    '#default_value' => $hcm_default,
  ];

  /*
   * //////////////////////////
   * Toolbar settings.
   * * //////////////////////////
   */
  $form['toolbar'] = [
    '#type' => 'details',
    '#title' => t('Toolbar'),
    '#open' => TRUE,
  ];

  // Toolbar setting.
  // Check if this is overridden by the logged in user.
  $userToolbar = _gin_toolbar();
  $toolbar = theme_get_setting('classic_toolbar');
  $description = t('Choose Drupal Toolbar.');

  if (!is_null($userToolbar) && $userToolbar !== $toolbar) {
    switch ($userToolbar) {
      case 1:
        $toolbar = t('Classic');
        break;

      case 'horizontal':
        $toolbar = t('Horizontal');
        break;

      default:
        $toolbar = t('Sidebar');
    }

    $description = t('Choose Drupal Toolbar.') . '<br/><span class="form-item__warning">' . t('This setting is overridden by the <a href="@editUrl">current user</a>. Toolbar: <strong>@toolbar</strong></span>', ['@toolbar' => $toolbar, '@editUrl' => $userEditUrl]);
  }
  $form['toolbar']['classic_toolbar'] = [
    '#type' => 'radios',
    '#title' => t('Drupal Toolbar'),
    '#description' => $description,
    '#default_value' => theme_get_setting('classic_toolbar'),
    '#options' => _gin_get_toolbar_presets(),
    '#after_build' => ['_gin_toolbar_radios'],
  ];

  /*
   * //////////////////////////
   * Logo settings.
   * * //////////////////////////
   */
  $form['icon'] = [
    '#type' => 'details',
    '#title' => t('Logo'),
    '#open' => TRUE,
  ];

  // Make sure that after updating it is set to use the default logo.
  $defaultIconDefault = theme_get_setting('icon_default') !== NULL ? theme_get_setting('icon_default') : TRUE;

  $form['icon']['icon_default'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the default logo supplied by the theme'),
    '#default_value' => $defaultIconDefault,
    '#tree' => FALSE,
  ];
  $form['icon']['settings'] = [
    '#type' => 'container',
    '#states' => [
      // Hide the logo settings when using the default logo.
      'invisible' => [
        ':input[name="icon_default"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['icon']['settings']['icon_path'] = [
    '#type' => 'textfield',
    '#title' => t('Path to custom logo'),
    '#default_value' => theme_get_setting('icon_path'),
  ];
  $form['icon']['settings']['icon_upload'] = [
    '#type' => 'file',
    '#title' => t('Upload logo image'),
    '#maxlength' => 40,
    '#description' => t("If you don't have direct file access to the server, use this field to upload your logo."),
    '#upload_validators' => [
      'file_validate_extensions' => ['png gif jpg jpeg apng svg'],
    ],
  ];

  // Add submit/validate function.
  $form['#validate'][] = 'gin_form_system_theme_settings_alter_validate';

  // Attach custom js.
  $form['#attached']['library'][] = 'gin/gin_settings';
}

/**
 * Validation for logo.
 */
function gin_form_system_theme_settings_alter_validate(array &$form, FormStateInterface $form_state) {
  $module_handler = \Drupal::service('module_handler');

  if (isset($form['icon']) && $module_handler->moduleExists('file')) {
    $file = _file_save_upload_from_form($form['icon']['settings']['icon_upload'], $form_state, 0);
    if ($file) {
      try {
        $filename = \Drupal::service('file_system')->copy($file->getFileUri(), \Drupal::config('system.file')->get('default_scheme') . '://');
        $form_state->setValue('icon_default', 0);
        $form_state->setValue('icon_path', $filename);
        $form_state->unsetValue('icon_upload');
      }
      catch (FileException $e) {
        \Drupal::logger('gin')->error($e->getMessage());
      }
    }
  }

  // When intending to use the default logo, unset the icon_path.
  if ($form_state->getValue('icon_default')) {
    $form_state->unsetValue('icon_path');
  }

  // If the user provided a path for a logo file, make sure a file
  // exists at that path.
  if ($form_state->getValue('icon_path')) {
    $path = _gin_validate_path_logo($form_state->getValue('icon_path'));

    if (!$path) {
      $form_state->setErrorByName('icon_path', t('The custom logo path is invalid.'));
    }
  }
}

/**
 * Accent color element.
 */
function _gin_accent_radios($element) {
  $options = array_keys($element['#options']);

  foreach ($options as $values) {
    $element[$values]['#attributes']['data-gin-accent'] = $element[$values]['#return_value'];
  }

  return $element;
}

/**
 * Toolbar element.
 */
function _gin_toolbar_radios($element) {
  $options = array_keys($element['#options']);

  $element['#attributes']['class'][] = 'toolbar-option';

  foreach ($options as $values) {
    $return_value = $element[$values]['#return_value'] === 1 ? 'legacy' : $element[$values]['#return_value'];

    $element[$values]['#attributes']['class'][] = 'toolbar-option__' . $return_value;
    $element[$values]['#attributes']['data-gin-toolbar'] = $return_value;
  }

  return $element;
}

/**
 * Implements helper function _gin_user_form_submit().
 */
function _gin_user_form_submit(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserDataInterface $userData */
  $userData = Drupal::service('user.data');

  /** @var \Drupal\user\UserInterface $user */
  $user = $form_state->getBuildInfo()['callback_object']->getEntity();

  if ($user->id()) {
    $enabledUserOverrides = $form_state->getValue('enable_user_settings');
    $userData->set('gin', $user->id(), 'enable_user_settings', $enabledUserOverrides);

    $darkModeValue = $form_state->getValue('enable_darkmode');
    $userData->set('gin', $user->id(), 'enable_darkmode', $darkModeValue);

    $accentColorPresetValue = $form_state->getValue('preset_accent_color');
    $userData->set('gin', $user->id(), 'preset_accent_color', $accentColorPresetValue);

    $accentColorValue = $form_state->getValue('accent_color');
    $userData->set('gin', $user->id(), 'accent_color', $accentColorValue);

    $toolbarValue = $form_state->getValue('classic_toolbar');
    $userData->set('gin', $user->id(), 'classic_toolbar', $toolbarValue);

    $highContrastValue = $form_state->getValue('high_contrast_mode');
    $userData->set('gin', $user->id(), 'high_contrast_mode', $highContrastValue);
  }
}

/**
 * Helper function for check if Gin is active.
 */
function _gin_is_active() {
  $theme_handler = \Drupal::service('theme_handler')->listInfo();

  // Check if set as frontend theme.
  $frontend_theme_name = \Drupal::config('system.theme')->get('default');

  // Check if base themes are set.
  if (isset($theme_handler[$frontend_theme_name]->base_themes)) {
    $frontend_base_themes = $theme_handler[$frontend_theme_name]->base_themes;
  }

  // Add theme name to base theme array.
  $frontend_base_themes[$frontend_theme_name] = $frontend_theme_name;

  // Check if set as admin theme.
  $admin_theme_name = \Drupal::config('system.theme')->get('admin');

  // Admin theme will have no value if it is set to use the default theme.
  if ($admin_theme_name) {
    $admin_base_themes = $theme_handler[$admin_theme_name]->base_themes;
    $admin_base_themes[$admin_theme_name] = $admin_theme_name;
  }
  else {
    $admin_base_themes = $frontend_base_themes;
  }

  $base_themes = array_merge($admin_base_themes, $frontend_base_themes);
  $gin_activated = array_key_exists('gin', $base_themes);

  return $gin_activated;
}

/**
 * Helper function for increasing/decreasing the brightness of a color.
 */
function _gin_adjust_brightness($hexCode, $adjustPercent) {
  $hexCode = ltrim($hexCode, '#');

  if (strlen($hexCode) == 3) {
    $hexCode = $hexCode[0] . $hexCode[0] . $hexCode[1] . $hexCode[1] . $hexCode[2] . $hexCode[2];
  }

  $hexCode = array_map('hexdec', str_split($hexCode, 2));

  foreach ($hexCode as & $color) {
    $adjustableLimit = $adjustPercent < 0 ? $color : 255 - $color;
    $adjustAmount = ceil($adjustableLimit * $adjustPercent);

    $color = str_pad(dechex($color + $adjustAmount), 2, '0', STR_PAD_LEFT);
  }

  return '#' . implode($hexCode);
}

/**
 * Check user has enabled darkmode helper function.
 */
function _gin_user__get_user_id() {
  $uid = Drupal::currentUser()->id();

  if (empty($uid)) {
    return NULL;
  }
  else {
    return $uid;
  }
}

/**
 * Check user has enabled darkmode helper function.
 */
function _gin_user__overrides_enabled() {
  $uid = _gin_user__get_user_id();

  /** @var \Drupal\user\UserDataInterface $userData */
  $userData = Drupal::service('user.data');

  $enableUserSetting = $userData->get('gin', $uid, 'enable_user_settings');
  $enableUserSetting = $enableUserSetting === 1 || $enableUserSetting === '1' ? TRUE : $enableUserSetting;
  $enableUserSetting = $enableUserSetting === 0 || $enableUserSetting === '0' ? FALSE : $enableUserSetting;

  if ($uid && $enableUserSetting === TRUE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Enable darkmode helper function.
 */
function _gin_dark_mode_enabled() {
  // Get user config.
  if (_gin_user__overrides_enabled()) {
    $darkmode = _gin_user__get_darkmode_enabled();
  }
  // Get general config.
  else {
    $darkmode = theme_get_setting('enable_darkmode');
  }

  // Convert older versions to boolean.
  $darkmode = $darkmode === 0 || $darkmode === '0' ? FALSE : $darkmode;
  $darkmode = $darkmode === 1 || $darkmode === '1' ? TRUE : $darkmode;

  return $darkmode;
}

/**
 * Check user has enabled darkmode helper function.
 */
function _gin_user__get_darkmode_enabled() {
  $uid = _gin_user__get_user_id();

  if ($uid) {
    /** @var \Drupal\user\UserDataInterface $userData */
    $userData = Drupal::service('user.data');

    return $userData->get('gin', $uid, 'enable_darkmode');
  }
  else {
    return FALSE;
  }
}

/**
 * Accent color helper function.
 */
function _gin_preset_accent_color() {
  if (_gin_user__overrides_enabled()) {
    return _gin_user__get_preset_accentcolor();
  }
  else {
    if (theme_get_setting('preset_accent_color') === 'claro_blue') {
      return 'blue';
    }
    else {
      return theme_get_setting('preset_accent_color');
    }
  }
}

/**
 * User Accent color helper function.
 */
function _gin_user__get_preset_accentcolor() {
  $uid = _gin_user__get_user_id();

  /** @var \Drupal\user\UserDataInterface $userData */
  $userData = Drupal::service('user.data');

  if ($userData->get('gin', $uid, 'preset_accent_color') !== NULL) {
    if ($userData->get('gin', $uid, 'preset_accent_color') === 'claro_blue') {
      return 'blue';
    }
    else {
      return $userData->get('gin', $uid, 'preset_accent_color');
    }
  }
  else {
    return NULL;
  }
}

/**
 * Accent color helper function.
 */
function _gin_accent_color() {
  if (_gin_user__overrides_enabled() && _gin_user__accentcolor()) {
    return _gin_user__accentcolor();
  }
  else {
    return theme_get_setting('accent_color');
  }
}

/**
 * User Accent color helper function.
 */
function _gin_user__accentcolor() {
  $uid = _gin_user__get_user_id();

  /** @var \Drupal\user\UserDataInterface $userData */
  $userData = Drupal::service('user.data');

  if ($uid && $userData->get('gin', $uid, 'preset_accent_color') === 'custom' && $userData->get('gin', $uid, 'accent_color') !== NULL) {
    return $userData->get('gin', $uid, 'accent_color');
  }
  else {
    return NULL;
  }
}

/**
 * Accent color presets helper function.
 */
function _gin_get_accent_color_presets() {
  return [
    'blue' => t('Gin Blue (Default)'),
    'light_blue' => t('Light Blue'),
    'dark_purple' => t('Dark Purple'),
    'purple' => t('Purple'),
    'teal' => t('Teal'),
    'green' => t('Green'),
    'pink' => t('Pink'),
    'red' => t('Red'),
    'orange' => t('Orange'),
    'yellow' => t('Yellow'),
    'custom' => t('Custom'),
  ];
}

/**
 * Toolbar presets helper function.
 */
function _gin_get_toolbar_presets() {
  return [
    'vertical' => t('Sidebar, Vertical Toolbar (Default)'),
    'horizontal' => t('Horizontal, Modern Toolbar'),
    1 => t('Legacy, Classic Drupal Toolbar'),
  ];
}

/**
 * Accent color preset label helper function.
 */
function _gin_get_accent_color_preset_label($key) {
  $options = _gin_get_accent_color_presets();

  if (!empty($options[$key])) {
    return $options[$key];
  }
  return '';
}

/**
 * Toolbar helper function.
 */
function _gin_toolbar() {
  // Get user config.
  if (_gin_user__overrides_enabled()) {
    $uid = _gin_user__get_user_id();
    $toolbar = _gin_user__toolbar();
  }
  // Get general config.
  else {
    $toolbar = theme_get_setting('classic_toolbar');
  }

  // Convert older versions to boolean.
  $toolbar = $toolbar === TRUE || $toolbar === 'true' ||  $toolbar === '1' || $toolbar === 1 ? 1 : $toolbar;

  return $toolbar;
}

/**
 * User Classic Toolbar helper function.
 */
function _gin_user__toolbar() {
  $uid = _gin_user__get_user_id();

  /** @var \Drupal\user\UserDataInterface $userData */
  $userData = Drupal::service('user.data');

  if ($userData->get('gin', $uid, 'classic_toolbar') !== NULL) {
    return $userData->get('gin', $uid, 'classic_toolbar');
  }
  else {
    return NULL;
  }
}

/**
 * Enable high contrast mode helper function.
 */
function _gin_highcontrastmode_enabled() {
  // Get user config.
  if (_gin_user__overrides_enabled()) {
    $hcm = _gin_user__get_highcontrastmode_enabled();
  }
  // Get general config.
  else {
    $hcm = theme_get_setting('high_contrast_mode');
  }

  // Convert older versions to boolean.
  $hcm = $hcm === 0 || $hcm === '0' ? FALSE : $hcm;
  $hcm = $hcm === 1 || $hcm === '1' ? TRUE : $hcm;

  return $hcm;
}

/**
 * Check user has enabled high contrast mode helper function.
 */
function _gin_user__get_highcontrastmode_enabled() {
  $uid = _gin_user__get_user_id();

  if ($uid) {
    /** @var \Drupal\user\UserDataInterface $userData */
    $userData = Drupal::service('user.data');

    return $userData->get('gin', $uid, 'high_contrast_mode');
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function for logo.
 *
 * Attempts to validate normal system paths, paths relative to the public files
 * directory, or stream wrapper URIs. If the given path is any of the above,
 * returns a valid path or URI that the theme system can display.
 *
 * @param string $path
 *   A path relative to the Drupal root or to the public files directory, or
 *   a stream wrapper URI.
 *
 * @return mixed
 *   A valid path that can be displayed through the theme system, or FALSE if
 *   the path could not be validated.
 */
function _gin_validate_path_logo($path) {
  $file_system = \Drupal::service('file_system');

  // // Absolute local file paths are invalid.
  if ($file_system->realpath($path) == $path) {
    return FALSE;
  }
  // A path relative to the Drupal root or a fully qualified URI is valid.
  if (is_file($path)) {
    return $path;
  }
  // Prepend 'public://' for relative file paths within public filesystem.
  if (StreamWrapperManager::getScheme($path) === FALSE) {
    $path = 'public://' . $path;
  }
  if (is_file($path)) {
    return $path;
  }
  return FALSE;
}
