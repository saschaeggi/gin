<?php

/**
 * @file
 * gin.theme
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_HOOK() for page_attachments.
 */
function gin_page_attachments_alter(&$page) {
  // Is User logged in?
  $logged_in = \Drupal::currentUser()->isAuthenticated();

  if ($logged_in) {
    $page['#attached']['library'][] = 'gin/gin_toolbar';
  }

  // Get config of accent color.
  $accent_color = theme_get_setting('accent_color', 'gin');

  if ($logged_in && $accent_color) {
    // Attach accent overrides CSS.
    $page['#attached']['library'][] = 'gin/gin_accent';

    $accent_color_hover = _gin_adjust_brightness($accent_color, -0.1);
    $accent_color_active = _gin_adjust_brightness($accent_color, -0.2);
    $accent_color_a20 = _gin_adjust_brightness($accent_color, 0.92);
    $accent_color_svg = str_replace('#', '%23', $accent_color);

    $accent_color_css = <<<EOH
      :root {
        --colorGinPrimary: $accent_color !important;
        --colorGinPrimaryHover: $accent_color_hover !important;
        --colorGinPrimaryActive: $accent_color_active !important;
      }

      body .claro-details__summary:hover::before,
      body .claro-details__summary:hover:focus::before,
      body .claro-details[open] > .claro-details__summary:focus::before,
      body .claro-details[open] > .claro-details__summary--accordion::before,
      body .claro-details[open] > .claro-details__summary--accordion-item::before,
      body .claro-details[open] > .claro-details__summary--vertical-tabs-item::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3E%3Cpath d='M5.2109375,1.3144531 3.7890625,2.7226562 9.0917969,8.0761719 3.7890625,13.429688 5.2109375,14.837891 11.908203,8.0761719Z' fill='$accent_color_svg'/%3E%3C/svg%3E");
      }

      body .tablesort--asc,
      body [dir="rtl"] .tablesort--asc {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='16' viewBox='0 0 10 12'%3E%3Cpath d='M 5 0.43945312 L 0.71875 4.71875 L 1.78125 5.78125 L 4.25 3.3125 L 4.25 11.25 L 5.75 11.25 L 5.75 3.3125 L 8.21875 5.78125 L 9.28125 4.71875 L 5 0.43945312 z' fill='$accent_color_svg'/%3E%3C/svg%3E");
      }

      body .tablesort--desc,
      body [dir="rtl"] .tablesort--desc {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='16' viewBox='0 0 10 12'%3E%3Cpath d='M 4.25 0.75 L 4.25 8.6875 L 1.78125 6.21875 L 0.71875 7.28125 L 5 11.560547 L 9.28125 7.28125 L 8.21875 6.21875 L 5.75 8.6875 L 5.75 0.75 L 4.25 0.75 z' fill='$accent_color_svg'/%3E%3C/svg%3E");
      }

      body .admin-item__link::before {
        background-image: url("data:image/svg+xml,%3Csvg width='9' height='14' viewBox='0 0 9 14' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M 1.7109375,0.31445312 0.2890625,1.7226562 5.5917969,7.0761719 0.2890625,12.429688 1.7109375,13.837891 8.4082031,7.0761719 Z' fill='$accent_color_svg'/%3E%3C/svg%3E");
      }

      body .form-boolean--type-radio:checked {
        background-image: url("data:image/svg+xml,%3Csvg width='17' height='17' viewBox='0 0 17 17' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle r='4.5' cx='8.5' cy='8.5' fill='$accent_color_svg'/%3E%3C/svg%3E");
      }

      body .action-link--icon-checkmark:hover::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' stroke='$accent_color_svg'  stroke-width='2' fill='none' width='16' height='16' viewBox='0 0 16 16'%3E%3Cpath d='M2 8.57143L5.6 12L14 4'/%3E%3C/svg%3E");
      }

      body .toolbar-tray-horizontal ul li.menu-item--expanded ul li.menu-item--expanded,
      body .toolbar-tray-horizontal .toolbar-menu:not(:first-child) li.menu-item--expanded>a:focus,
      body .toolbar .toolbar-icon.toolbar-handle::before,
      body .toolbar .toolbar-icon.toolbar-handle.open::before,
      body .toolbar .toolbar-menu .toolbar-menu .toolbar-icon.toolbar-handle::before,
      body .toolbar .toolbar-menu .toolbar-menu .toolbar-icon.toolbar-handle.open::before
      {
        background-image: url("data:image/svg+xml,%3Csvg width='9' height='14' viewBox='0 0 9 14' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M 1.7109375,0.31445312 0.2890625,1.7226562 5.5917969,7.0761719 0.2890625,12.429688 1.7109375,13.837891 8.4082031,7.0761719 Z' fill='$accent_color_svg'/%3E%3C/svg%3E");
      }
EOH;

    if (
      $logged_in ||
      $route == 'user.login' ||
      $route == 'user.pass' ||
      $route == 'user.register'
    ) {
      $page['#attached']['html_head'][] = [
        [
          '#tag' => 'style',
          '#value' => Markup::create($accent_color_css),
        ],
        'gin-accent-color',
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for links__dropbutton.
 */
function gin_preprocess_dropbutton_wrapper(&$variables) {
  $children = (string) $variables['children'];

  $pattern = '/(<ul\sclass\s*= *["\']?)([^"\']*)(.*)(<li)/i';
  $lipattern = '/(<li class\s*= *["\']?)([^"\']*)/i';

  $children = preg_replace($lipattern, '$1$2 dropbutton__item dropbutton__item--extrasmall', $children);
  $children = preg_replace('/<li>/', '<li class="dropbutton__item dropbutton__item--extrasmall">', $children);
  $children = preg_replace($pattern, '$1$2 dropbutton--multiple dropbutton--extrasmall $3$4', $children);

  $variables['children'] = Markup::create($children);
}

/**
 * Form_alter()
 */
function gin_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, 'node_') !== FALSE && strpos($form_id, 'edit_form') !== FALSE) {
    if (isset($form['actions']['delete_translation'])) {
      $form['actions']['delete_translation']['#attributes']['class'][] = 'button--danger';
    }
  }

  // User form (Login, Register or Forgot password)
  if (strpos($form_id, 'user_login') !== FALSE || strpos($form_id, 'user_register') !== FALSE || strpos($form_id, 'user_pass') !== FALSE) {
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
  }
}

/**
 * Implements form_alter() for forms.
 */
function gin_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
}

/**
 * Page title alter()
 */
function gin_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  // Are we looking at a user?
  $path = \Drupal::service('path.current')->getPath();

  // Prepare $path.
  $path = substr($path, 1);
  $path = str_replace('/', '_', $path);

  // Chek if path is available and we're at user level.
  if (!empty($path) && strpos($path, 'user_') !== FALSE) {
    $suggestions[] = 'page_title__user';
    $suggestions[] = 'page_title__' . $path;
  }
}

/**
 * Set Gin CSS first!
 */
function gin_css_alter(&$css, $assets) {
  // UPDATE THIS PATH TO YOUR MODULE'S CSS PATH.
  $path = drupal_get_path('theme', 'gin') . '/dist/css/gin.css';
  if (isset($css[$path])) {
    // Use anything greater than 100 to have it load after the theme
    // as CSS_AGGREGATE_THEME is set to 100.
    $css[$path]['group'] = 200;
  }
}

/**
 * Custom theme settings.
 */
function gin_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['custom_settings'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => t('Custom Settings'),
  ];

  $form['custom_settings']['accent_color'] = [
    '#type' => 'color',
    '#title' => t('Accent color (EXPERIMENTAL)'),
    '#description' => t('Set the accent color for the login (hex value in format of #AAAAAA, Default value: #003cc5).'),
    '#default_value' => theme_get_setting('accent_color'),
    '#min' => 7,
    '#max' => 7,
  ];
}

/**
 * Increases or decreases the brightness of a color.
 */
function _gin_adjust_brightness($hexCode, $adjustPercent) {
  $hexCode = ltrim($hexCode, '#');

  if (strlen($hexCode) == 3) {
    $hexCode = $hexCode[0] . $hexCode[0] . $hexCode[1] . $hexCode[1] . $hexCode[2] . $hexCode[2];
  }

  $hexCode = array_map('hexdec', str_split($hexCode, 2));

  foreach ($hexCode as & $color) {
    $adjustableLimit = $adjustPercent < 0 ? $color : 255 - $color;
    $adjustAmount = ceil($adjustableLimit * $adjustPercent);

    $color = str_pad(dechex($color + $adjustAmount), 2, '0', STR_PAD_LEFT);
  }

  return '#' . implode($hexCode);
}
